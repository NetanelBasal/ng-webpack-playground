const ora=require("ora");function isObject(e){return e&&"object"==typeof e&&!Array.isArray(e)}function mergeDeep(e,...t){if(!t.length)return e;const o=t.shift();if(isObject(e)&&isObject(o))for(const t in o)isObject(o[t])?(e[t]||Object.assign(e,{[t]:{}}),mergeDeep(e[t],o[t])):Object.assign(e,{[t]:o[t]});return mergeDeep(e,...t)}function buildObjFromPath(e,t){const o={};let r=o;for(;e.length>1;){const[t,...o]=e;e=o,r[t]||(r[t]={}),r=r[t]}const[n]=e;return r[n]=t,o}function sanitizeForRegex(e){return e.split("").map(e=>["$","^","/"].includes(e)?`\\${e}`:e).join("")}function toCamelCase(e){return e.replace(/(?:^\w|[A-Z]|\b\w)/g,(e,t)=>0===t?e.toLowerCase():e.toUpperCase()).replace(/\s+|_|-|\//g,"")}function countKeysRecursively(e){return Object.keys(e).reduce((t,o)=>isObject(e[o])?++t+countKeysRecursively(e[o]):++t,0)}const defaultLogger={log:(...e)=>console.log(...e),succeed:e=>spinner.succeed(e),startSpinner:e=>spinner=ora().start(e)},noop=()=>{},prodModeLogger={log:noop,startSpinner:noop,succeed:noop};function getLogger(e){return e?prodModeLogger:defaultLogger}module.exports={mergeDeep:mergeDeep,buildObjFromPath:buildObjFromPath,isObject:isObject,sanitizeForRegex:sanitizeForRegex,toCamelCase:toCamelCase,countKeysRecursively:countKeysRecursively,getLogger:getLogger};
