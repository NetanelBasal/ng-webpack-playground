const{mergeDeep:mergeDeep}=require("./helpers"),{initProcessParams:initProcessParams,extractTemplateKeys:extractTemplateKeys,extractTSKeys:extractTSKeys}=require("./keysBuilder"),{compareKeysToFiles:compareKeysToFiles}=require("./keysDetective"),pkgDir=require("pkg-dir"),fs=require("fs");let managerConfig,commonConfig,init=!0;class TranslocoPlugin{constructor(e){if(e)managerConfig=e;else{const e=fs.readFileSync(`${pkgDir.sync()}/package.json`,{encoding:"UTF-8"});managerConfig=JSON.parse(e)["transloco-keys-manager"]}commonConfig=initProcessParams({},managerConfig.extract)}apply(e){e.hooks.watchRun.tapAsync("WatchRun",(e,s)=>{if(init)return s(),void(init=!1);const t={html:[],ts:[]},n=Object.keys(e.watchFileSystem.watcher.mtimes);if(managerConfig.extract.configPath){n.some(e=>e.includes(managerConfig.extract.configPath))&&(commonConfig=initProcessParams({},managerConfig.extract))}for(const e of n){let s;e.endsWith(".html")?s="html":!e.endsWith("spec.ts")&&e.endsWith(".ts")&&(s="ts"),s&&t[s].push(e)}t.html.length||t.ts.length?Promise.all([extractTemplateKeys({...commonConfig,files:t.html}),extractTSKeys({...commonConfig,files:t.ts})]).then(([e,t])=>{const n=mergeDeep({},e.keys,t.keys);Object.keys(n).some(e=>Object.keys(n[e]).length>0)&&compareKeysToFiles({keys:n,i18nPath:managerConfig.find.i18n,addMissing:!0,prodMode:!0}),s()}):s()})}}module.exports=TranslocoPlugin;
